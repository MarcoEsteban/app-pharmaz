// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ===========
// Tabla Menus
// ===========
model Menus {
  id          String         @id @default(uuid())
  nombre      String
  enlace      String         @unique
  icon        String
  createdAt   DateTime       @default(now()) // Fecha de creación del registro.
  updatedAt   DateTime       @updatedAt      // Fecha de la última actualización del registro.
  
  Roles       RolesOnMenus[] // Indico que estamos estableciendo la Relación de Many to Many
}

// ===========
// Tabla Roles
// ===========
model Roles {
  id          String         @id @default(uuid())
  nombre      String
  estado      Boolean        @default(true)
  createdAt   DateTime       @default(now()) // Fecha de creación del registro.
  updatedAt   DateTime       @updatedAt      // Fecha de la última actualización del registro.
  
  Menus       RolesOnMenus[] // Indico que estamos estableciendo la Relación de [Many to Many]
  Usuario     Usuario[]      // Indico que estamos estableciendo la Relacion [One to Many]
}

// ==================
// Tabla RolesOnMenus
// ==================
model RolesOnMenus {
  roles       Roles          @relation(fields: [rolesId], references: [id]) 
  menus       Menus          @relation(fields: [menusId], references: [id])
  rolesId     String
  menusId     String
  createdAt   DateTime       @default(now()) // Fecha de creación del registro.
  updatedAt   DateTime       @updatedAt      // Fecha de la última actualización del registro.

  @@id([rolesId, menusId]) // Relacion de [Many to Many]
}

// ==============
// Tabla Personas
// ==============
model Personas {
  id          String         @id @default(uuid())
  ci          String         @unique
  nombre      String
  ap          String?
  am          String?
  direccion   String?
  celular     Int?
  foto        String?
  estado      Boolean        @default(true)
  createdAt   DateTime       @default(now()) // Indico la fecha de creacion.
  updatedAt   DateTime       @updatedAt      // Fecha de la última actualización del registro.

  Usuario     Usuario[] // Relacion One to Many
  Proveedores Proveedores[] // Relacion One to Many
}

// ==============
// Tabla Usuario
// ==============
model Usuario {
  id                String          @id @default(uuid())
  email             String          @unique
  password          String
  createdAt         DateTime        @default(now()) // Indico la fecha de creacion.
  updatedAt         DateTime        @updatedAt      // Fecha de la última actualización del registro.
  
  DatosFarmacia     DatosFarmacia[] // Relacion One to Many

  personas          Personas        @relation(fields: [personasId], references: [id])
  roles             Roles           @relation(fields: [rolesId], references: [id])
  personasId        String
  rolesId           String
}

model Proveedores {
  id         String       @id @default(uuid())
  email      String       @unique
  createdAt  DateTime     @default(now()) // Indico la fecha de creacion.
  updatedAt  DateTime     @updatedAt      // Fecha de la última actualización del registro.

  // Relacion One to Many
  personas   Personas @relation(fields: [personasId], references: [id])
  personasId String
}

model DatosFarmacia {
  id          String          @id @default(uuid())
  nombre      String
  email       String          @unique
  celular     Int?
  direccion   String?
  foto        String?
  createdAt   DateTime        @default(now()) // Indico la fecha de creacion.
  updatedAt   DateTime        @updatedAt      // Fecha de la última actualización del registro.

  Usuario     Usuario         @relation(fields: [usuarioId], references: [id])
  usuarioId   String
}

