// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========
// Tabla Menus
// ===========
model Menus {
  id        String   @id @default(uuid())
  nombre    String
  enlace    String   @unique
  icon      String
  createdAt DateTime @default(now()) // Fecha de creación del registro.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  Roles RolesOnMenus[] // Indico que estamos estableciendo la Relación de Many to Many
}

// ===========
// Tabla Roles
// ===========
model Roles {
  id        String   @id @default(uuid())
  nombre    String
  estado    Boolean  @default(true)
  createdAt DateTime @default(now()) // Fecha de creación del registro.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  Menus   RolesOnMenus[] // Indico que estamos estableciendo la Relación de [Many to Many]
  Usuario Usuario[] // Indico que estamos estableciendo la Relacion [One to Many]
}

// ==================
// Tabla RolesOnMenus
// ==================
model RolesOnMenus {
  roles     Roles    @relation(fields: [rolesId], references: [id])
  menus     Menus    @relation(fields: [menusId], references: [id])
  rolesId   String
  menusId   String
  createdAt DateTime @default(now()) // Fecha de creación del registro.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  @@id([rolesId, menusId]) // Relacion de [Many to Many]
}

// ==============
// Tabla Personas
// ==============
model Personas {
  id        String   @id @default(uuid())
  ci        String   @unique
  nombre    String
  ap        String?
  am        String?
  direccion String?
  celular   Int?
  foto      String?
  estado    Boolean  @default(true)
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  Usuario Usuario[] // Relacion One to Many
  Ventas  Ventas[]
}

// ==============
// Tabla Usuario
// ==============
model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  DatosFarmacia DatosFarmacia[] // Relacion One to Many

  personas   Personas @relation(fields: [personasId], references: [id])
  roles      Roles    @relation(fields: [rolesId], references: [id])
  personasId String
  rolesId    String

  Lotes  Lotes[] // Relacion One to Many
  Ventas Ventas[]
}

// ===================
// Tabla DatosFarmacia
// ===================
model DatosFarmacia {
  id        String   @id @default(uuid())
  nombre    String
  email     String   @unique
  celular   Int?
  direccion String?
  foto      String?
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  Usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String
}

// =================
// Tabla Proveedores
// =================
model Proveedores {
  id        String  @id @default(uuid())
  nit       String
  nombre    String  @unique
  celular   Int
  foto      String?
  direccion String?
  email     String  @unique
  estado    Boolean @default(true)

  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  Lotes Lotes[] // Relacion One to Many
}

// ===========
// Tabla Lotes
// ===========
model Lotes {
  id          String   @id @default(uuid())
  stock       Int
  vencimiento DateTime
  estado      Boolean  @default(true)
  createdAt   DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt   DateTime @updatedAt // Fecha de la última actualización del registro.

  Producto  Medicamentos @relation("MedicamentoLotes", fields: [productoId], references: [id])
  Proveedor Proveedores  @relation(fields: [proveedorId], references: [id])
  Usuario   Usuario      @relation(fields: [usuarioId], references: [id])

  productoId  String
  proveedorId String
  usuarioId   String

  // Medicamentos    MedicamentosOnLotes[] // Relacion One to Many
}

// ==================
// Tabla Medicamentos
// ==================
model Medicamentos {
  id            String  @id @default(uuid())
  //categoria     String
  nombre        String
  concentracion String?
  adicional     String?
  tipo          String?
  receta        String?
  precio        Decimal @db.Decimal(10, 2) // Un campo precio con decimales
  foto          String?
  estado        Boolean @default(true)

  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  // Lotes                   MedicamentosOnLotes[] // Relacion One to Many
  lotes           Lotes[]           @relation("MedicamentoLotes") // Relación con Lotes
  laboratorios    MedicaOnLabo[]
  presentacion    MedicaOnPresen[]
  principioActivo MedicaOnPrinci[]
  Clasificacion   MedicaOnClasifi[]

  DetalleVentas DetalleVentas[]
}

// ==================
// Tabla MedicaOnLabo
// ==================
model MedicaOnLabo {
  Producto       Medicamentos @relation(fields: [productoId], references: [id])
  Laboratorio    Laboratorios @relation(fields: [laboratoriosId], references: [id])
  productoId     String
  laboratoriosId String
  createdAt      DateTime     @default(now()) // Fecha de creación del registro.
  updatedAt      DateTime     @updatedAt // Fecha de la última actualización del registro.

  @@id([productoId, laboratoriosId]) // Relacion de [Many to Many]
}

// ====================
// Tabla MedicaOnPresen
// ====================
model MedicaOnPresen {
  Producto       Medicamentos @relation(fields: [productoId], references: [id])
  Presentacion   Presentacion @relation(fields: [presentacionId], references: [id])
  productoId     String
  presentacionId String
  createdAt      DateTime     @default(now()) // Fecha de creación del registro.
  updatedAt      DateTime     @updatedAt // Fecha de la última actualización del registro.

  @@id([productoId, presentacionId]) // Relacion de [Many to Many]
}

// ====================
// Tabla MedicaOnPrinci
// ====================
model MedicaOnPrinci {
  Producto          Medicamentos    @relation(fields: [productoId], references: [id])
  PrincipioActivo   PrincipioActivo @relation(fields: [principioActivoId], references: [id])
  productoId        String
  principioActivoId String
  createdAt         DateTime        @default(now()) // Fecha de creación del registro.
  updatedAt         DateTime        @updatedAt // Fecha de la última actualización del registro.

  @@id([productoId, principioActivoId]) // Relacion de [Many to Many]
}

// =====================
// Tabla MedicaOnClasifi
// =====================
model MedicaOnClasifi {
  Producto        Medicamentos  @relation(fields: [productoId], references: [id])
  Clasificacion   Clasificacion @relation(fields: [clasificacionId], references: [id])
  productoId      String
  clasificacionId String
  createdAt       DateTime      @default(now()) // Fecha de creación del registro.
  updatedAt       DateTime      @updatedAt // Fecha de la última actualización del registro.

  @@id([productoId, clasificacionId]) // Relacion de [Many to Many]
}

// ==================
// Tabla Laboratorios
// ==================
model Laboratorios {
  id        String   @id @default(uuid())
  nombre    String   @unique
  foto      String?
  estado    Boolean  @default(true)
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  producto MedicaOnLabo[]
}

// ==================
// Tabla Presentacion
// ==================
model Presentacion {
  id        String   @id @default(uuid())
  nombre    String   @unique
  estado    Boolean  @default(true)
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  producto MedicaOnPresen[]
}

// =======================
// Tabla Clasificacion
// =======================
//model ViaAdministracion {
model Clasificacion {
  id        String   @id @default(uuid())
  nombre    String   @unique
  estado    Boolean  @default(true)
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  producto MedicaOnClasifi[]
}

// =====================
// Tabla PrincipioActivo
// =====================
model PrincipioActivo {
  id        String   @id @default(uuid())
  nombre    String   @unique
  estado    Boolean  @default(true)
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  producto MedicaOnPrinci[]
}

// ===================
// Tabla Transacciones
// ===================
model Transacciones {
  id          String   @id @default(uuid())
  metodoPago  String
  numeroVenta Int
  total       Decimal  @db.Decimal(10, 2) // Un campo precio con decimales
  fecha       DateTime
  createdAt   DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt   DateTime @updatedAt // Fecha de la última actualización del registro.

  Ventas Ventas[]
}

// ============
// Tabla Ventas
// ============
model Ventas {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  // RELATION OF ONE TO MANY
  Usuario       Usuario       @relation(fields: [usuarioId], references: [id])
  Personas      Personas      @relation(fields: [personasId], references: [id])
  Transacciones Transacciones @relation(fields: [metodoPagoId], references: [id])
  usuarioId     String
  personasId    String
  metodoPagoId  String

  DetalleVentas DetalleVentas[] // Indico que estamos estableciendo la Relación de Many to Many
}

// ====================
// Tabla Detalle Ventas
// ====================
model DetalleVentas {
  cantidad  Int
  precio    Decimal  @db.Decimal(10, 2) // Un campo precio con decimales
  subTotal  Decimal  @db.Decimal(10, 2) // Un campo precio con decimales
  createdAt DateTime @default(now()) // Indico la fecha de creacion.
  updatedAt DateTime @updatedAt // Fecha de la última actualización del registro.

  // RELATION OF ONE TO MANY
  Ventas        Ventas       @relation(fields: [ventaId], references: [id])
  Medicamentos  Medicamentos @relation(fields: [medicamentoId], references: [id])
  ventaId       String
  medicamentoId String

  @@id([ventaId, medicamentoId]) // Relacion de [Many to Many]
}
